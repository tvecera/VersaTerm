;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; uart_tx.pio
.program uart_tx
.side_set 1 opt

; UART transmit program with LCD CS pin check.
; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.
; LCD CS pin is read via IN base pin.

start:
    pull       side 1 [7]      ; Assert stop bit, or stall with line in idle state

wait_cs_high:
    wait 1 pin 0               ; Wait until LCD_CS pin is high (inactive)

    set x, 7   side 0 [7]  ; Preload bit counter, assert start bit for 8 clocks
bitloop:                   ; This loop will run 8 times (8n1 UART)
    out pins, 1            ; Shift 1 bit from OSR to the first OUT pin
    jmp x-- bitloop   [6]  ; Each loop iteration is 8 cycles.

% c-sdk {
#include "hardware/clocks.h"

// UART TX initialization function
static inline void uart_tx_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint lcd_cs_pin, uint baud) {
    // Tell PIO to initially drive output-high on the selected pin, then map PIO
    // onto that pin with the IO muxes.
    pio_sm_set_pins_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);

    // Set TX pin as output
    pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);
    pio_gpio_init(pio, pin_tx);

    // Initialize the LCD CS pin as input
    pio_sm_set_consecutive_pindirs(pio, sm, lcd_cs_pin, 1, false);      // Set LCD CS pin as input
    pio_gpio_init(pio, lcd_cs_pin);

    // Get default config and modify
    pio_sm_config c = uart_tx_program_get_default_config(offset);

    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 32);

    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)
    sm_config_set_out_pins(&c, pin_tx, 1);
    sm_config_set_sideset_pins(&c, pin_tx);

    // Set IN base pin to lcd_cs_pin for reading its state
    sm_config_set_in_pins(&c, lcd_cs_pin);

    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);

    // Initialize and enable the state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void uart_tx_program_set_baudrate(PIO pio, uint sm, uint baud) {
    // The state machine processes 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    pio_sm_set_clkdiv(pio, sm, div);
}

static inline void uart_tx_program_putc(PIO pio, uint sm, char c) {
    pio_sm_put_blocking(pio, sm, (uint32_t)c);
}

static inline void uart_tx_program_puts(PIO pio, uint sm, const char *s) {
    while (*s)
        uart_tx_program_putc(pio, sm, *s++);
}

%}

; uart_rx.pio
.program uart_rx

; Slightly more fleshed-out 8n1 UART receiver which handles framing errors and break conditions more gracefully.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.
; LCD CS pin is read via an additional pin configured as an IN pin.

start:
wait_cs_high:
    wait 1 pin 2          ; Wait until LCD_CS pin is high (not active)

    wait 0 pin 0          ; Wait for start bit (UART RX pin goes low)
    set x, 7    [10]      ; Preload bit counter, delay to mid-bit sample point
bitloop:
    in pins, 1            ; Shift data bit into ISR
    jmp x-- bitloop [6]   ; Loop 8 times, each iteration is 8 cycles
    jmp pin good_stop     ; Check stop bit (should be high)
    irq 4 rel             ; Framing error, set sticky flag
    wait 1 pin 0          ; Wait until line goes idle
    jmp start             ; Restart without pushing data
good_stop:
    push                  ; Push received data to RX FIFO

% c-sdk {

// UART RX initialization function
static inline void uart_rx_program_init(PIO pio, uint sm, uint offset, uint pin_rx, uint lcd_cs_pin, uint baud) {
	// Initialize the RX pin (UART receive pin)
	pio_sm_set_consecutive_pindirs(pio, sm, pin_rx, 1, false);
	pio_gpio_init(pio, pin_rx);
	gpio_pull_up(pin_rx);
	pio_sm_config c = uart_rx_program_get_default_config(offset);

	// Initialize the LCD CS pin as input
	pio_sm_set_consecutive_pindirs(pio, sm, lcd_cs_pin, 1, false);  // Set LCD CS pin as input
	pio_gpio_init(pio, lcd_cs_pin);

	// Set the IN base pin to pin_rx (UART RX pin)
	sm_config_set_in_pins(&c, pin_rx);  // For WAIT, IN instructions

	// Set the JMP pin to the UART RX pin
	sm_config_set_jmp_pin(&c, pin_rx);  // For JMP instructions

	// Shift to right, autopush disabled
	sm_config_set_in_shift(&c, true, false, 32);

	// Deeper FIFO as we're not doing any TX
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

	// SM transmits 1 bit per 8 execution cycles.
	float div = (float)clock_get_hz(clk_sys) / (8 * baud);
	sm_config_set_clkdiv(&c, div);

	// Initialize and enable the state machine
	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

static inline void uart_rx_program_set_baudrate(PIO pio, uint sm, uint baudrate) {
	// The state machine processes 1 bit per 8 execution cycles.
	float div = (float)clock_get_hz(clk_sys) / (8 * baudrate);
	pio_sm_set_clkdiv(pio, sm, div);
}

static inline unsigned char uart_rx_program_getc(PIO pio, uint sm, unsigned char *c) {
	// 8-bit read from the uppermost byte of the FIFO, as data is left-justified
	io_rw_8 *rxfifo_shift = (io_rw_8*)&pio->rxf[sm] + 3;
	if (pio_sm_is_rx_fifo_empty(pio, sm)) {
		return 0;
	}
	*c = (char)*rxfifo_shift;
	return 1;
}

%}